"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.input = void 0;
/**
 * General INPUT widget.
 */
const index_1 = require("../../index");
/**
 * Creates a input element tied to the given observable. The required options argument allows
 * controlling the behavior, see IInputOptions for details.
 *
 * This is intended for string input elements, with "type" such as text, email, url, password,
 * number, tel.
 *
 * Note that every change to the observable will affect the input element, but not every change to
 * the input element will affect the observable. Specifically, unless {onInput: true} is set, the
 * visible content may differ from the observable until the element loses focus or Enter is hit.
 *
 * Example usage:
 *    input(obs, {}, {type: 'text', placeholder: 'Your name...'});
 *    input(obs, {isValid: isValidObs}, {type: 'email', placeholder: 'Your email...'});
 *    input(obs, {onInput: true}, {type: 'text'});
 */
function input(obs, options, ...args) {
    const isValid = options.isValid;
    function setValue(elem) {
        index_1.bundleChanges(() => {
            obs.set(elem.value);
            if (isValid) {
                isValid.set(elem.validity.valid);
            }
        });
    }
    return index_1.dom('input', ...args, index_1.dom.prop('value', obs), (isValid ?
        (elem) => index_1.dom.autoDisposeElem(elem, index_1.subscribe(obs, (use) => isValid.set(elem.checkValidity()))) :
        null), options.onInput ? index_1.dom.on('input', (e, elem) => setValue(elem)) : null, index_1.dom.on('change', (e, elem) => setValue(elem)), index_1.dom.onKeyPress({ Enter: (e, elem) => setValue(elem) }));
}
exports.input = input;
//# sourceMappingURL=input.js.map