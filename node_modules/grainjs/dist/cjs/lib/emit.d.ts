/**
 * emit.js implements an Emitter class which emits events to a list of listeners. Listeners are
 * simply functions to call, and "emitting an event" just calls those functions.
 *
 * This is similar to Backbone events, with more focus on efficiency. Both inserting and removing
 * listeners is constant time.
 *
 * To create an emitter:
 *    let emitter = new Emitter();
 *
 * To add a listener:
 *    let listener = fooEmitter.addListener(callback);
 * To remove a listener:
 *    listener.dispose();
 *
 * The only way to remove a listener is to dispose the Listener object returned by addListener().
 * You can often use autoDispose to do this automatically when subscribing in a constructor:
 *    this.autoDispose(fooEmitter.addListener(this.onFoo, this));
 *
 * To emit an event, call emit() with any number of arguments:
 *    emitter.emit("hello", "world");
 */
export declare type ListenerCB<T> = (this: T, ...args: any[]) => void;
export declare type ChangeCB = (hasListeners: boolean) => void;
/**
 * This is an implementation of a doubly-linked list, with just the minimal functionality we need.
 */
export declare class LLink {
    protected _next: LLink | null;
    protected _prev: LLink | null;
    constructor();
    isDisposed(): boolean;
    protected _insertBefore(next: LLink, node: LLink): void;
    protected _removeNode(node: LLink): void;
    protected _disposeList(): void;
}
export declare class Emitter extends LLink {
    private _changeCB;
    private _changeCBContext;
    /**
     * Constructs an Emitter object.
     */
    constructor();
    /**
     * Adds a listening callback to the list of functions to call on emit().
     * @param {Function} callback: Function to call.
     * @param {Object} optContext: Context for the function.
     * @returns {Listener} Listener object. Its dispose() method removes the callback from the list.
     */
    addListener<T>(callback: ListenerCB<T>, optContext?: T): Listener;
    /**
     * Calls all listener callbacks, passing all arguments to each of them.
     */
    emit(...args: any[]): void;
    /**
     * Sets the single callback that would get called when a listener is added or removed.
     * @param {Function} changeCB(hasListeners): Function to call after a listener is added or
     *    removed. It's called with a boolean indicating whether this Emitter has any listeners.
     *    Pass in `null` to unset the callback. Note that it can be called multiple times in a row
     *    with hasListeners `true`.
     */
    setChangeCB(changeCB: ChangeCB, optContext?: any): void;
    /**
     * Helper used by Listener class, but not intended for public usage.
     */
    _triggerChangeCB(): void;
    /**
     * Returns whether this Emitter has any listeners.
     */
    hasListeners(): boolean;
    /**
     * Disposes the Emitter. It breaks references between the emitter and all the items, allowing
     * for better garbage collection. It effectively disposes all current listeners.
     */
    dispose(): void;
}
/**
 * Listener object wraps a callback added to an Emitter, allowing for O(1) removal when the
 * listener is disposed.
 */
export declare class Listener extends LLink {
    private emitter;
    private callback;
    private context?;
    static callAll(begin: LLink, end: LLink, args: any[]): void;
    constructor(emitter: Emitter, callback: ListenerCB<any>, context?: any);
    dispose(): void;
}
