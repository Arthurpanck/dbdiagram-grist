import { BindableValue } from './binding';
import { DomElementMethod, DomMethod, IAttrObj } from './domImpl';
/**
 * Sets multiple attributes of a DOM element. The `attrs()` variant takes no `elem` argument.
 * Null and undefined values are omitted, and booleans are either omitted or set to empty string.
 * @param {Object} attrsObj: Object mapping attribute names to attribute values.
 */
export declare function attrsElem(elem: Element, attrsObj: IAttrObj): void;
export declare function attrs(attrsObj: IAttrObj): DomElementMethod;
/**
 * Sets an attribute of a DOM element to the given value. Removes the attribute when the value is
 * null or undefined. The `attr()` variant takes no `elem` argument, and `attrValue` may be an
 * observable or function.
 * @param {Element} elem: The element to update.
 * @param {String} attrName: The name of the attribute to bind, e.g. 'href'.
 * @param {String|null} attrValue: The string value or null to remove the attribute.
 */
export declare function attrElem(elem: Element, attrName: string, attrValue: string | null): void;
export declare function attr(attrName: string, attrValueObs: BindableValue<string>): DomElementMethod;
/**
 * Sets or removes a boolean attribute of a DOM element. According to the spec, empty string is a
 * valid true value for the attribute, and the false value is indicated by the attribute's absence.
 * The `boolAttr()` variant takes no `elem`, and `boolValue` may be an observable or function.
 * @param {Element} elem: The element to update.
 * @param {String} attrName: The name of the attribute to bind, e.g. 'checked'.
 * @param {Boolean} boolValue: Boolean value whether to set or unset the attribute.
 */
export declare function boolAttrElem(elem: Element, attrName: string, boolValue: boolean): void;
export declare function boolAttr(attrName: string, boolValueObs: BindableValue<boolean>): DomElementMethod;
/**
 * Adds a text node to the element. The `text()` variant takes no `elem`, and `value` may be an
 * observable or function.
 * @param {Element} elem: The element to update.
 * @param {String} value: The text value to add.
 */
export declare function textElem(elem: Node, value: string): void;
export declare function text(valueObs: BindableValue<string>): DomMethod;
/**
 * Sets a style property of a DOM element to the given value. The `style()` variant takes no
 * `elem`, and `value` may be an observable or function.
 * @param {Element} elem: The element to update.
 * @param {String} property: The name of the style property to update, e.g. 'fontWeight'.
 * @param {String} value: The value for the property.
 */
export declare function styleElem(elem: Element, property: string, value: string): void;
export declare function style(property: string, valueObs: BindableValue<string>): DomElementMethod;
/**
 * Sets the property of a DOM element to the given value.
 * The `prop()` variant takes no `elem`, and `value` may be an observable or function.
 * @param {Element} elem: The element to update.
 * @param {String} property: The name of the property to update, e.g. 'disabled'.
 * @param {Object} value: The value for the property.
 */
export declare function propElem<T>(elem: Node, property: string, value: T): void;
export declare function prop<T>(property: string, valueObs: BindableValue<T>): DomMethod;
/**
 * Shows or hides the element depending on a boolean value. Note that the element must be visible
 * initially (i.e. unsetting style.display should show it).
 * The `show()` variant takes no `elem`, and `boolValue` may be an observable or function.
 * @param {Element} elem: The element to update.
 * @param {Boolean} boolValue: True to show the element, false to hide it.
 */
export declare function showElem(elem: HTMLElement, boolValue: boolean): void;
export declare function show(boolValueObs: BindableValue<boolean>): DomElementMethod;
/**
 * The opposite of show, hiding the element when boolValue is true.
 * The `hide()` variant takes no `elem`, and `boolValue` may be an observable or function.
 * @param {Element} elem: The element to update.
 * @param {Boolean} boolValue: True to hide the element, false to show it.
 */
export declare function hideElem(elem: HTMLElement, boolValue: boolean): void;
export declare function hide(boolValueObs: BindableValue<boolean>): DomElementMethod;
/**
 * Sets or toggles the given css class className.
 */
export declare function clsElem(elem: Element, className: string, boolValue?: boolean): void;
/**
 * Sets or toggles a css class className. If className is an observable, it will be replaced when
 * the observable changes. If a plain string, then an optional second boolean observable may be
 * given, which will toggle it.
 *
 *    dom.cls('foo')                                // Sets className 'foo'
 *    dom.cls('foo', isFoo);                        // Toggles 'foo' className according to observable.
 *    dom.cls('foo', (use) => use(isFoo));          // Toggles 'foo' className according to observable.
 *    dom.cls(fooClass);                            // Sets className to the value of fooClass observable
 *    dom.cls((use) => `prefix-${use(fooClass)}`);  // Sets className to prefix- plus fooClass observable.
 */
export declare function cls(className: string, boolValue?: BindableValue<boolean>): DomElementMethod;
export declare function cls(className: BindableValue<string>): DomElementMethod;
/**
 * Just like cls() but prepends a prefix to className, including when it is an observable.
 */
export declare function clsPrefix(prefix: string, className: string, boolValue?: BindableValue<boolean>): DomElementMethod;
export declare function clsPrefix(prefix: string, className: BindableValue<string>): DomElementMethod;
/**
 * Associate arbitrary data with a DOM element. The `data()` variant takes no `elem`, and `value`
 * may be an observable or function.
 * @param {Element} elem: The element with which to associate data.
 * @param {String} key: Key to identify this piece of data among others attached to elem.
 * @param {Object} value: Arbitrary value to associate with elem.
 */
export declare function dataElem(elem: Node, key: string, value: any): void;
export declare function data(key: string, valueObs: BindableValue<any>): DomMethod;
export declare function getData(elem: Node, key: string): any;
/**
 * A very simple setup to identify DOM elements for testing purposes. Here's the recommended
 * usage.
 *
 *   // In the component to be tested.
 *   import {noTestId, TestId} from 'grainjs';
 *
 *   function myComponent(myArgs, testId: TestId = noTestId) {
 *     return dom(..., testId("some-name"),
 *       dom(..., testId("another-name"), ...),
 *     );
 *   }
 *
 * In the fixture code using this component:
 *
 *   import {makeTestId} from 'grainjs';
 *
 *   dom(..., myComponent(myArgs, makeTestId('test-mycomp-'), ...)
 *
 * In the webdriver test code:
 *
 *   driver.find('.test-my-comp-some-name')
 *   driver.find('.test-my-comp-another-name')
 *
 * When myComponent() is created with testId argument omitted, the testId() calls are no-ops. When
 * makeTestId('test-foo-') is passed in, testId() calls simply add a css class with that prefix.
 */
export declare type TestId = (name: string) => DomElementMethod | null;
/**
 * See documentation for TestId above.
 */
export declare function makeTestId(prefix: string): TestId;
/**
 * See documentation for TestId above.
 */
export declare const noTestId: TestId;
