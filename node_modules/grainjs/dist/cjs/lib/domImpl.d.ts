export declare type DomMethod<T = Node> = (elem: T) => DomArg<T> | void;
export declare type DomElementMethod = DomMethod<HTMLElement>;
export interface IAttrObj {
    [attrName: string]: string | boolean | null | undefined;
}
export declare type DomArg<T = Node> = Node | string | void | null | undefined | IDomArgs<T> | DomMethod<T> | (T extends Element ? IAttrObj : never);
export interface IDomArgs<T = Node> extends Array<DomArg<T>> {
}
export declare type DomElementArg = DomArg<HTMLElement>;
/**
 * dom('tag#id.class1.class2', ...args)
 *   The first argument is a string consisting of a tag name, with optional #foo suffix
 *   to add the ID 'foo', and zero or more .bar suffixes to add a CSS class 'bar'.
 *
 *   NOTE that better typings are available when a tag is used directly, e.g.
 *      dom('input', {id: 'foo'}, (elem) => ...) --> elem has type HTMLInputElement
 *      dom('input#foo',          (elem) => ...) --> elem has type HTMLElement
 *
 * The rest of the arguments are optional and may be:
 *
 *   Nodes - which become children of the created element;
 *   strings - which become text node children;
 *   objects - of the form {attr: val} to set additional attributes on the element;
 *   Arrays - which are flattened with each item processed recursively;
 *   functions - which are called with elem as the argument, for a chance to modify the
 *       element as it's being created. Return values are processed recursively.
 *   "dom methods" - expressions such as `dom.attr('href', url)` or `dom.hide(obs)`, which
 *       are actually special cases of the "functions" category.
 */
export declare function dom<Tag extends TagName>(tagString: Tag, ...args: IDomArgs<TagElem<Tag>>): TagElem<Tag>;
export declare type TagName = keyof HTMLElementTagNameMap | string;
export declare type TagElem<T extends TagName> = T extends keyof HTMLElementTagNameMap ? HTMLElementTagNameMap[T] : HTMLElement;
/**
 * svg('tag#id.class1.class2', ...args)
 *  Same as dom(...), but creates an SVG element.
 */
export declare function svg(tagString: string, ...args: IDomArgs<SVGElement>): SVGElement;
/**
 * Update an element with any number of arguments, as documented in dom().
 */
export declare function update<T extends Node, Args extends IDomArgs<T>>(elem: T, ...args: Args): T;
/**
 * Creates a DocumentFragment processing arguments the same way as the dom() function.
 */
export declare function frag(...args: IDomArgs<DocumentFragment>): DocumentFragment;
/**
 * Find the first element matching a selector; just an abbreviation for document.querySelector().
 */
export declare function find(selector: string): Element | null;
/**
 * Find all elements matching a selector; just an abbreviation for document.querySelectorAll().
 */
export declare function findAll(selector: string): NodeListOf<Element>;
