/**
 * In-code styling for DOM components, inspired by Reacts Styled Components.
 *
 * Usage:
 *    const title = styled('h1', `
 *      font-size: 1.5em;
 *      text-align: center;
 *      color: palevioletred;
 *    `);
 *
 *    const wrapper = styled('section', `
 *      padding: 4em;
 *      background: papayawhip;
 *    `);
 *
 *    wrapper(title('Hello world'))
 *
 * This generates class names for title and wrapper, adds the styles to the document on first use,
 * and the result is equivalent to:
 *
 *    dom(`section.${wrapper.className}`, dom(`h1.${title.className}`, 'Hello world'));
 *
 * Calls to styled() should happen at the top level, at import time, in order to register all
 * styles upfront. Actual work happens the first time a style is needed to create an element.
 * Calling styled() elsewhere than at top level is wasteful and bad for performance.
 *
 * You may create a style that modifies an existing styled() or other component, e.g.
 *
 *    const title2 = styled(title, `font-size: 1rem; color: red;`);
 *
 * Calling title2('Foo') becomes equivalent to dom(`h1.${title.className}.${title2.className}`).
 *
 * Styles may incorporate other related styles by nesting them under the main one as follows:
 *
 *     const myButton = styled('button', `
 *       border-radius: 0.5rem;
 *       border: 1px solid grey;
 *       font-size: 1rem;
 *
 *       &:active {
 *         background: lightblue;
 *       }
 *       &-small {
 *         font-size: 0.6rem;
 *       }
 *     `);
 *
 * In nested styles, ampersand (&) gets replaced with the generated .className of the main element.
 *
 * The resulting styled component provides a .cls() helper to simplify using prefixed classes. It
 * behaves as dom.cls(), but prefixes the class names with the generated className of the main
 * element. E.g. for the example above,
 *
 *      myButton(myButton.cls('-small'), 'Test')
 *
 * creates a button with both the myButton style above, and the style specified under "&-small".
 *
 * Animations with @keyframes may be created with a unique name by using the keyframes() helper:
 *
 *    const rotate360 = keyframes(`
 *      from { transform: rotate(0deg); }
 *      to { transform: rotate(360deg); }
 *    `);
 *
 *    const Rotate = styled('div', `
 *      display: inline-block;
 *      animation: ${rotate360} 2s linear infinite;
 *    `);
 */
import { IDomArgs, TagElem, TagName } from './domImpl';
import { cls } from './domMethods';
export interface IClsName {
    className: string;
    cls: typeof cls;
}
export declare type DomCreateFunc<R, Args extends IDomArgs<R> = IDomArgs<R>> = (...args: Args) => R;
export declare function styled<Tag extends TagName>(tag: Tag, styles: string): DomCreateFunc<TagElem<Tag>> & IClsName;
export declare function styled<Args extends any[], R extends Element>(creator: (...args: Args) => R, styles: string): typeof creator & IClsName;
export declare function keyframes(styles: string): string;
